{"version":3,"sources":["Components/Header/Header.module.css","Components/MaterialCalculation/MaterialCalculation.module.css","Components/AreaCalculation/AreaCalculation.module.css","Components/Header/Header.jsx","Components/MaterialCalculation/MaterialCalculation.jsx","redux/AppReducer.js","Components/InitialData/InitialDataContainer.jsx","Components/InitialData/InitialData.jsx","Components/InitialData/calculateWorkArea.js","Components/AreaCalculation/AreaCalculationContainer.jsx","Components/AreaCalculation/AreaCalculation.jsx","App.js","serviceWorker.js","redux/store.js","index.js","Components/InitialData/InitialData.module.css"],"names":["module","exports","Header","className","style","headerContainer","headerContainer__title","MaterialCalculation","materialCalcContainer","initialState","isAreaCalculated","bottomArea","overlapArea","slopeAreaByDepth","slopeAreaBySlopeAngle","slopeAreaBySlopeRatio","InitialDataContainer","connect","state","areaCalculatedSuccess","type","setWorkArea","payload","formik","useFormik","initialValues","bottomLength","bottomWidth","horizonLength","horizonWidth","overlap","depth","slopeAngle","slopeRatio","depthSelect","slopeAngleSelect","slopeRatioSelect","onSubmit","values","Math","sqrt","pow","cos","PI","calculateWorkArea","commonDataForm","handleSubmit","commonDataForm__fullForm","commonDataForm__imageDataForm","commonDataForm__initialDataForm","id","name","onChange","handleChange","value","commonDataForm__submitButton","AreaCalculationContainer","app","areaCalcContainer","App","Boolean","window","location","hostname","match","reducers","combineReducers","action","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.47a898a7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerContainer\":\"Header_headerContainer__1rZjy\",\"headerContainer__title\":\"Header_headerContainer__title__gwwGF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"materialCalcContainer\":\"MaterialCalculation_materialCalcContainer__2weV3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"areaCalcContainer\":\"AreaCalculation_areaCalcContainer__OYLME\"};","import React from 'react';\r\nimport style from './Header.module.css';\r\n\r\nexport const Header = ({}) => {\r\n    return (<div className={style.headerContainer}>\r\n        <div className={style.headerContainer__title}>\r\n            Имя объекта:\r\n        </div>\r\n        </div>)\r\n}","import React from 'react';\r\nimport style from './MaterialCalculation.module.css';\r\n\r\nexport const MaterialCalculation = ({}) => {\r\n    return (<div className={style.materialCalcContainer}>\r\n        MaterialCalculation\r\n    </div>)\r\n}","const AREA_CALCULATED_SUCCESS = 'AREA_CALCULATED_SUCCESS';\r\nconst SET_WORK_AREA = 'SET_WORK_AREA';\r\n\r\nlet initialState = {\r\n    isAreaCalculated: true,\r\n    bottomArea: null,\r\n    overlapArea: null,\r\n    slopeAreaByDepth: null,\r\n    slopeAreaBySlopeAngle: null,\r\n    slopeAreaBySlopeRatio: null,\r\n}\r\n\r\nexport const appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case AREA_CALCULATED_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                isAreaCalculated: true\r\n            }\r\n        }\r\n        case SET_WORK_AREA: {\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const areaCalculatedSuccess = () => {\r\n    return {\r\n        type: AREA_CALCULATED_SUCCESS\r\n    }\r\n};\r\nexport const setWorkArea = (bottomArea, overlapArea, slopeAreaByDepth, slopeAreaBySlopeAngle, slopeAreaBySlopeRatio) => {\r\n    return {\r\n        type: SET_WORK_AREA, payload: {bottomArea, overlapArea, slopeAreaByDepth, slopeAreaBySlopeAngle, slopeAreaBySlopeRatio}\r\n    }\r\n};\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {InitialData} from './InitialData';\r\nimport {areaCalculatedSuccess, setWorkArea} from '../../redux/AppReducer';\r\n\r\nconst mapStateToProps = (state) => ({\r\n\r\n})\r\n\r\nexport const InitialDataContainer = connect(mapStateToProps, {areaCalculatedSuccess, setWorkArea}) (InitialData);\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport style from './InitialData.module.css';\r\nimport {useFormik} from 'formik';\r\nimport {calculateWorkArea} from './calculateWorkArea';\r\n\r\nexport const InitialData = ({setWorkArea, areaCalculatedSuccess}) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            bottomLength: '',\r\n            bottomWidth: '',\r\n            horizonLength: '',\r\n            horizonWidth: '',\r\n            overlap: '1,5',\r\n            depth: '',\r\n            slopeAngle: '',\r\n            slopeRatio: '',\r\n            depthSelect: '',\r\n            slopeAngleSelect: '',\r\n            slopeRatioSelect: '',\r\n        },\r\n        onSubmit: values => {\r\n            setWorkArea(calculateWorkArea(values));\r\n            areaCalculatedSuccess();\r\n        },\r\n    });\r\n\r\n    return (<div className={style.commonDataForm}>\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div className={style.commonDataForm__fullForm}>\r\n                <div className={style.commonDataForm__imageDataForm}>\r\n                    commonDataForm__imageDataForm\r\n                </div>\r\n                <div className={style.commonDataForm__initialDataForm}>\r\n                    <div>\r\n                        {'Длина по горизонту:'}\r\n                        <input\r\n                            id='horizonLength'\r\n                            name='horizonLength'\r\n                            type='number'\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.horizonLength}\r\n                        />\r\n                        {'м'}\r\n                    </div>\r\n                    <div>\r\n                        {'Ширина по горизонту:'}\r\n                        <input\r\n                            id='horizonWidth'\r\n                            name='horizonWidth'\r\n                            type='number'\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.horizonWidth}\r\n                        />\r\n                        {'м'}\r\n                    </div>\r\n                    <div>\r\n                    {'Длина по дну:'}\r\n                    <input\r\n                        id='bottomLength'\r\n                        name='bottomLength'\r\n                        type='number'\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.bottomLength}\r\n                    />\r\n                        {'м'}\r\n                    </div>\r\n                    <div>\r\n                    {'Ширина по дну:'}\r\n                    <input\r\n                        id='bottomWidth'\r\n                        name='bottomWidth'\r\n                        type='number'\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.bottomWidth}\r\n                    />\r\n                        {'м'}\r\n                    </div>\r\n                    <div>\r\n                    {'Напуск для анкерной траншеи:'}\r\n                    <input\r\n                        id='overlap'\r\n                        name='overlap'\r\n                        type='number'\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.overlap}\r\n                    />\r\n                        {'м'}\r\n                    </div>\r\n                    <div>\r\n                    {'Глубина:'}\r\n                    <input\r\n                        id='depth'\r\n                        name='depth'\r\n                        type='number'\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.depth}\r\n                    />\r\n                        {'м'}\r\n                    <input\r\n                        id='depthSelect'\r\n                        name='Select'\r\n                        type='radio'\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.depthSelect}\r\n                    />\r\n                    </div>\r\n                    <div>\r\n                    {'Угол заложения откосов:'}\r\n                    <input\r\n                        id='slopeAngle'\r\n                        name='slopeAngle'\r\n                        type='text'\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.slopeAngle}\r\n                    />\r\n                        {'°'}\r\n                    <input\r\n                        id='slopeAngleSelect'\r\n                        name='Select'\r\n                        type='radio'\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.slopeAngleSelect}\r\n                    />\r\n                    </div>\r\n                    <div>\r\n                    {'Уклон откосов:'}\r\n                    <input\r\n                        id='slopeRatio'\r\n                        name='slopeRatio'\r\n                        type='text'\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.slopeRatio}\r\n                    />\r\n                    <input\r\n                        id='slopeRatioSelect'\r\n                        name='Select'\r\n                        type='radio'\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.slopeRatioSelect}\r\n                    />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={style.commonDataForm__submitButton}>\r\n                <button type='submit'>Расчет площади сварочных работ</button>\r\n            </div>\r\n        </form>\r\n    </div>)\r\n}\r\n\r\n","export const calculateWorkArea = ({\r\n                               bottomLength,\r\n                               bottomWidth,\r\n                               horizonLength,\r\n                               horizonWidth,\r\n                               overlap,\r\n                               depth,\r\n                               slopeAngle,\r\n                               slopeRatio,\r\n                               depthSelect,\r\n                               slopeAngleSelect,\r\n                               slopeRatioSelect,\r\n                           }) => {\r\nlet slopeAreaByDepth, slopeAreaBySlopeAngle, slopeAreaBySlopeRatio;\r\nlet bottomArea = bottomLength * bottomWidth;\r\nlet overlapArea = (horizonLength + overlap * 2) * (horizonWidth + overlap * 2) - horizonLength * horizonWidth;\r\nif (depth && depthSelect) {\r\n    let slopeLengthByLength = Math.sqrt(Math.pow(depth, 2) + Math.pow((horizonLength-bottomLength)/2, 2));\r\n    let slopeLengthByWidth = Math.sqrt(Math.pow(depth, 2) + Math.pow((horizonWidth-bottomWidth)/2, 2));\r\n\r\n    slopeAreaByDepth = ((bottomLength + horizonLength) / 2 * slopeLengthByLength +\r\n        (bottomWidth + horizonWidth) / 2 * slopeLengthByWidth)*2;\r\n} else slopeAreaByDepth = null;\r\n    if (slopeAngle && slopeAngleSelect) {\r\n        let slopeLengthByLength = (horizonLength-bottomLength)/2 / Math.cos(slopeAngle * Math.PI / 180);\r\n        let slopeLengthByWidth = (horizonWidth-bottomWidth)/2 / Math.cos(slopeAngle * Math.PI / 180);\r\n        slopeAreaBySlopeAngle = ((bottomLength + horizonLength) / 2 * slopeLengthByLength +\r\n            (bottomWidth + horizonWidth) / 2 * slopeLengthByWidth) * 2;\r\n    } else slopeAreaBySlopeAngle = null;\r\n    if (slopeRatio && slopeRatioSelect) {\r\n        let slopeLengthByLength = (horizonLength-bottomLength)/2 / Math.cos(slopeAngle * Math.PI / 180);\r\n        let slopeLengthByWidth = (horizonWidth-bottomWidth)/2 / Math.cos(slopeAngle * Math.PI / 180);\r\n        slopeAreaBySlopeRatio = ((bottomLength + horizonLength) / 2 * slopeLengthByLength +\r\n            (bottomWidth + horizonWidth) / 2 * slopeLengthByWidth) * 2;\r\n    } else slopeAreaBySlopeRatio = null;\r\n    return {bottomArea, overlapArea, slopeAreaByDepth, slopeAreaBySlopeAngle, slopeAreaBySlopeRatio}\r\n}","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {AreaCalculation} from './AreaCalculation';\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAreaCalculated: state.app.isAreaCalculated,\r\n})\r\n\r\nexport const AreaCalculationContainer = connect(mapStateToProps, {}) (AreaCalculation);\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport style from './AreaCalculation.module.css';\r\n\r\nexport const AreaCalculation = ({isAreaCalculated}) => {\r\n    return (<div className={style.areaCalcContainer}>\r\n        {isAreaCalculated && 'AreaCalculation'}\r\n    </div>)\r\n}","import React from 'react';\nimport './App.css';\nimport {Header} from './Components/Header/Header';\nimport {MaterialCalculation} from './Components/MaterialCalculation/MaterialCalculation';\nimport {InitialDataContainer} from './Components/InitialData/InitialDataContainer';\nimport {AreaCalculationContainer} from './Components/AreaCalculation/AreaCalculationContainer';\n\nconst App = () => {\n    return (\n        <>\n            <Header/>\n            <InitialDataContainer/>\n            <AreaCalculationContainer/>\n            <MaterialCalculation/>\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore} from 'redux';\r\nimport {appReducer} from './AppReducer';\r\n\r\nlet reducers = combineReducers({\r\n    app: appReducer,\r\n})\r\n\r\nconst store = createStore(reducers);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"commonDataForm\":\"InitialData_commonDataForm__3fsyN\",\"commonDataForm__fullForm\":\"InitialData_commonDataForm__fullForm__1FKAx\",\"commonDataForm__imageDataForm\":\"InitialData_commonDataForm__imageDataForm__3lhCo\",\"commonDataForm__initialDataForm\":\"InitialData_commonDataForm__initialDataForm__3RiE7\",\"commonDataForm__submitButton\":\"InitialData_commonDataForm__submitButton__2ZJD9\"};"],"sourceRoot":""}