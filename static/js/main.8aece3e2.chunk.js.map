{"version":3,"sources":["Components/Header/Header.module.css","Components/MaterialCalculation/MaterialCalculation.module.css","Components/Header/Header.jsx","Components/MaterialCalculation/MaterialCalculation.jsx","redux/AppReducer.js","Components/InitialData/InitialDataContainer.jsx","Components/InitialData/calculateWorkArea.js","Components/InitialData/InitialData.jsx","redux/selectors.js","Components/AreaCalculation/AreaCalculationContainer.jsx","Components/AreaCalculation/AreaCalculation.jsx","App.js","serviceWorker.js","redux/store.js","index.js","Components/InitialData/InitialData.module.css","Components/AreaCalculation/AreaCalculation.module.css"],"names":["module","exports","Header","className","style","headerContainer","headerContainer__title","MaterialCalculation","materialCalcContainer","initialState","isAreaCalculated","bottomArea","overlapArea","slopeAreaByDepth","slopeAreaBySlopeAngle","slopeAreaBySlopeRatio","InitialDataContainer","connect","state","areaCalculatedSuccess","type","setWorkArea","payload","calculateWorkArea","bottomLength","bottomWidth","horizonLength","horizonWidth","overlap","depth","slopeAngle","slopeRatio","depthSelect","slopeAngleSelect","slopeRatioSelect","Math","sqrt","pow","cos","PI","formik","useFormik","initialValues","onSubmit","values","slopeLengthByLength","slopeLengthByWidth","round","slopeCoefficient","split","commonDataForm","handleSubmit","commonDataForm__fullForm","commonDataForm__imageDataForm","commonDataForm__initialDataForm","id","name","onChange","handleChange","value","commonDataForm__submitButton","getOverlapArea","app","getBottomArea","getSlopeAreaSelector","createSelector","arrayAreas","max","apply","getSumAreaSelector","maxSlopeArea","slopeArea","AreaCalculationContainer","sumArea","areaCalcContainer","areaCalcContainer__areaItem","areaCalcContainer__sumArea","App","Boolean","window","location","hostname","match","reducers","combineReducers","action","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8aece3e2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerContainer\":\"Header_headerContainer__1rZjy\",\"headerContainer__title\":\"Header_headerContainer__title__gwwGF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"materialCalcContainer\":\"MaterialCalculation_materialCalcContainer__2weV3\"};","import React from 'react';\r\nimport style from './Header.module.css';\r\n\r\nexport const Header = ({}) => {\r\n    return (<div className={style.headerContainer}>\r\n        <div className={style.headerContainer__title}>\r\n            Имя объекта:\r\n        </div>\r\n        </div>)\r\n}","import React from 'react';\r\nimport style from './MaterialCalculation.module.css';\r\n\r\nexport const MaterialCalculation = ({}) => {\r\n    return (<div className={style.materialCalcContainer}>\r\n        MaterialCalculation\r\n    </div>)\r\n}","const AREA_CALCULATED_SUCCESS = 'AREA_CALCULATED_SUCCESS';\r\nconst SET_WORK_AREA = 'SET_WORK_AREA';\r\n\r\nlet initialState = {\r\n    isAreaCalculated: false,\r\n    bottomArea: null,\r\n    overlapArea: null,\r\n    slopeAreaByDepth: null,\r\n    slopeAreaBySlopeAngle: null,\r\n    slopeAreaBySlopeRatio: null,\r\n}\r\n\r\nexport const appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case AREA_CALCULATED_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                isAreaCalculated: true\r\n            }\r\n        }\r\n        case SET_WORK_AREA: {\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const areaCalculatedSuccess = () => {\r\n    return {\r\n        type: AREA_CALCULATED_SUCCESS\r\n    }\r\n};\r\nexport const setWorkArea = (bottomArea, overlapArea, slopeAreaByDepth, slopeAreaBySlopeAngle, slopeAreaBySlopeRatio) => {\r\n    return {\r\n        type: SET_WORK_AREA, payload: {bottomArea, overlapArea, slopeAreaByDepth, slopeAreaBySlopeAngle, slopeAreaBySlopeRatio}\r\n    }\r\n};\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {InitialData} from './InitialData';\r\nimport {areaCalculatedSuccess, setWorkArea} from '../../redux/AppReducer';\r\nimport {calculateWorkArea} from './calculateWorkArea';\r\n\r\nconst mapStateToProps = (state) => ({\r\n\r\n})\r\n\r\nexport const InitialDataContainer = connect(mapStateToProps, {areaCalculatedSuccess, setWorkArea, calculateWorkArea}) (InitialData);\r\n\r\n\r\n\r\n","export const calculateWorkArea = ({\r\n                               bottomLength,\r\n                               bottomWidth,\r\n                               horizonLength,\r\n                               horizonWidth,\r\n                               overlap,\r\n                               depth,\r\n                               slopeAngle,\r\n                               slopeRatio,\r\n                               depthSelect,\r\n                               slopeAngleSelect,\r\n                               slopeRatioSelect,\r\n                           }) => {\r\nlet slopeAreaByDepth, slopeAreaBySlopeAngle, slopeAreaBySlopeRatio;\r\nlet bottomArea = bottomLength * bottomWidth;\r\nlet overlapArea = (horizonLength + overlap * 2) * (horizonWidth + overlap * 2) - horizonLength * horizonWidth;\r\nif (depth && depthSelect) {\r\n    let slopeLengthByLength = Math.sqrt(Math.pow(depth, 2) + Math.pow((horizonLength-bottomLength)/2, 2));\r\n    let slopeLengthByWidth = Math.sqrt(Math.pow(depth, 2) + Math.pow((horizonWidth-bottomWidth)/2, 2));\r\n\r\n    slopeAreaByDepth = ((bottomLength + horizonLength) / 2 * slopeLengthByLength +\r\n        (bottomWidth + horizonWidth) / 2 * slopeLengthByWidth)*2;\r\n} else slopeAreaByDepth = null;\r\n    if (slopeAngle && slopeAngleSelect) {\r\n        let slopeLengthByLength = (horizonLength-bottomLength)/2 / Math.cos(slopeAngle * Math.PI / 180);\r\n        let slopeLengthByWidth = (horizonWidth-bottomWidth)/2 / Math.cos(slopeAngle * Math.PI / 180);\r\n        slopeAreaBySlopeAngle = ((bottomLength + horizonLength) / 2 * slopeLengthByLength +\r\n            (bottomWidth + horizonWidth) / 2 * slopeLengthByWidth) * 2;\r\n    } else slopeAreaBySlopeAngle = null;\r\n    if (slopeRatio && slopeRatioSelect) {\r\n        let slopeLengthByLength = (horizonLength-bottomLength)/2 / Math.cos(slopeAngle * Math.PI / 180);\r\n        let slopeLengthByWidth = (horizonWidth-bottomWidth)/2 / Math.cos(slopeAngle * Math.PI / 180);\r\n        slopeAreaBySlopeRatio = ((bottomLength + horizonLength) / 2 * slopeLengthByLength +\r\n            (bottomWidth + horizonWidth) / 2 * slopeLengthByWidth) * 2;\r\n    } else slopeAreaBySlopeRatio = null;\r\n    return {bottomArea, overlapArea, slopeAreaByDepth, slopeAreaBySlopeAngle, slopeAreaBySlopeRatio}\r\n}","import React from 'react';\r\nimport style from './InitialData.module.css';\r\nimport {useFormik} from 'formik';\r\n\r\n\r\nexport const InitialData = ({setWorkArea, areaCalculatedSuccess, calculateWorkArea}) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            bottomLength: null,\r\n            bottomWidth: null,\r\n            horizonLength: null,\r\n            horizonWidth: null,\r\n            overlap: 1.5,\r\n            depth: null,\r\n            slopeAngle: null,\r\n            slopeRatio: null,\r\n            depthSelect: true,\r\n            slopeAngleSelect: false,\r\n            slopeRatioSelect: false,\r\n        },\r\n        onSubmit: values => {\r\n            let {\r\n                bottomLength,\r\n                bottomWidth,\r\n                horizonLength,\r\n                horizonWidth,\r\n                overlap,\r\n                depth,\r\n                slopeAngle,\r\n                slopeRatio,\r\n            } = values;\r\n\r\n            let slopeAreaByDepth, slopeAreaBySlopeAngle, slopeAreaBySlopeRatio;\r\n            let bottomArea = bottomLength * bottomWidth;\r\n            let overlapArea = (horizonLength + overlap * 2) * (horizonWidth + overlap * 2) - horizonLength * horizonWidth;\r\n\r\n            if (depth) {\r\n                let slopeLengthByLength = Math.sqrt(Math.pow(depth, 2) + Math.pow((horizonLength - bottomLength) / 2, 2));\r\n                let slopeLengthByWidth = Math.sqrt(Math.pow(depth, 2) + Math.pow((horizonWidth - bottomWidth) / 2, 2));\r\n                slopeAreaByDepth = Math.round(((bottomLength + horizonLength) / 2 * slopeLengthByLength +\r\n                    (bottomWidth + horizonWidth) / 2 * slopeLengthByWidth) * 2);\r\n            } else slopeAreaByDepth = null;\r\n\r\n            if (slopeAngle) {\r\n                let slopeLengthByLength = (horizonLength - bottomLength) / 2 / Math.cos(slopeAngle * Math.PI / 180);\r\n                let slopeLengthByWidth = (horizonWidth - bottomWidth) / 2 / Math.cos(slopeAngle * Math.PI / 180);\r\n                slopeAreaBySlopeAngle = Math.round (((bottomLength + horizonLength) / 2 * slopeLengthByLength +\r\n                    (bottomWidth + horizonWidth) / 2 * slopeLengthByWidth) * 2);\r\n            } else slopeAreaBySlopeAngle = null;\r\n\r\n            if (slopeRatio) {\r\n                let slopeCoefficient = slopeRatio.split(':');\r\n                let slopeLengthByLength = Math.sqrt(Math.pow((horizonLength - bottomLength) / 2 * slopeCoefficient[1] / slopeCoefficient[0], 2) +\r\n                    Math.pow((horizonLength - bottomLength) / 2, 2));\r\n                let slopeLengthByWidth = Math.sqrt(Math.pow((horizonWidth - bottomWidth) / 2 * slopeCoefficient[1] / slopeCoefficient[0], 2) +\r\n                    Math.pow((horizonWidth - bottomWidth) / 2, 2));\r\n                slopeAreaBySlopeRatio = Math.round(((bottomLength + horizonLength) / 2 * slopeLengthByLength +\r\n                    (bottomWidth + horizonWidth) / 2 * slopeLengthByWidth) * 2);\r\n            } else slopeAreaBySlopeRatio = null;\r\n            setWorkArea(bottomArea, overlapArea, slopeAreaByDepth, slopeAreaBySlopeAngle, slopeAreaBySlopeRatio);\r\n            areaCalculatedSuccess();\r\n\r\n        },\r\n    });\r\n\r\n    return (<div className={style.commonDataForm}>\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div className={style.commonDataForm__fullForm}>\r\n                <div className={style.commonDataForm__imageDataForm}>\r\n                    commonDataForm__imageDataForm\r\n                </div>\r\n                <div className={style.commonDataForm__initialDataForm}>\r\n                    <div>\r\n                        {'Длина по горизонту:'}\r\n                        <input\r\n                            id='horizonLength'\r\n                            name='horizonLength'\r\n                            type='number'\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.horizonLength}\r\n                        />\r\n                        {'м'}\r\n                    </div>\r\n                    <div>\r\n                        {'Ширина по горизонту:'}\r\n                        <input\r\n                            id='horizonWidth'\r\n                            name='horizonWidth'\r\n                            type='number'\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.horizonWidth}\r\n                        />\r\n                        {'м'}\r\n                    </div>\r\n                    <div>\r\n                        {'Длина по дну:'}\r\n                        <input\r\n                            id='bottomLength'\r\n                            name='bottomLength'\r\n                            type='number'\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.bottomLength}\r\n                        />\r\n                        {'м'}\r\n                    </div>\r\n                    <div>\r\n                        {'Ширина по дну:'}\r\n                        <input\r\n                            id='bottomWidth'\r\n                            name='bottomWidth'\r\n                            type='number'\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.bottomWidth}\r\n                        />\r\n                        {'м'}\r\n                    </div>\r\n                    <div>\r\n                        {'Напуск для анкерной траншеи:'}\r\n                        <input\r\n                            id='overlap'\r\n                            name='overlap'\r\n                            type='number'\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.overlap}\r\n                        />\r\n                        {'м'}\r\n                    </div>\r\n                    <div>\r\n                        {'Глубина:'}\r\n                        <input\r\n                            id='depth'\r\n                            name='depth'\r\n                            type='number'\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.depth}\r\n                        />\r\n                        {'м'}\r\n                        <input\r\n                            id='depthSelect'\r\n                            name='Select'\r\n                            type='radio'\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.depthSelect}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        {'Угол заложения откосов:'}\r\n                        <input\r\n                            id='slopeAngle'\r\n                            name='slopeAngle'\r\n                            type='number'\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.slopeAngle}\r\n                        />\r\n                        {'°'}\r\n                        <input\r\n                            id='slopeAngleSelect'\r\n                            name='Select'\r\n                            type='radio'\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.slopeAngleSelect}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        {'Уклон откосов:'}\r\n                        <input\r\n                            id='slopeRatio'\r\n                            name='slopeRatio'\r\n                            type='text'\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.slopeRatio}\r\n                        />\r\n                        <input\r\n                            id='slopeRatioSelect'\r\n                            name='Select'\r\n                            type='radio'\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.slopeRatioSelect}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={style.commonDataForm__submitButton}>\r\n                <button type='submit'>Расчет площади сварочных работ</button>\r\n            </div>\r\n        </form>\r\n    </div>)\r\n}\r\n\r\n","import { createSelector } from 'reselect';\r\n\r\nconst getSlopeArea = (state) => {\r\n    return [\r\n        state.app.slopeAreaByDepth,\r\n        state.app.slopeAreaBySlopeAngle,\r\n        state.app.slopeAreaBySlopeRatio\r\n    ]\r\n};\r\nexport const getOverlapArea = (state) => {\r\n    return state.app.overlapArea\r\n};\r\nexport const getBottomArea = (state) => {\r\n    return state.app.bottomArea;\r\n};\r\n\r\nexport const getSlopeAreaSelector = createSelector(getSlopeArea,\r\n    (arrayAreas) => {\r\nreturn Math.max.apply(null,arrayAreas);\r\n    });\r\n\r\nexport const getSumAreaSelector = createSelector(getSlopeAreaSelector, getOverlapArea, getBottomArea,\r\n    (maxSlopeArea, overlapArea, slopeArea) => {\r\n    return maxSlopeArea + overlapArea + slopeArea;\r\n    });\r\n\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {AreaCalculation} from './AreaCalculation';\r\nimport {getBottomArea, getOverlapArea, getSlopeAreaSelector, getSumAreaSelector} from '../../redux/selectors';\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAreaCalculated: state.app.isAreaCalculated,\r\n    bottomArea: getBottomArea(state),\r\n    slopeArea: getSlopeAreaSelector(state),\r\n    overlapArea: getOverlapArea(state),\r\n    sumArea: getSumAreaSelector(state),\r\n})\r\n\r\nexport const AreaCalculationContainer = connect(mapStateToProps, {}) (AreaCalculation);\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport style from './AreaCalculation.module.css';\r\n\r\nexport const AreaCalculation = ({isAreaCalculated, bottomArea, slopeArea, overlapArea, sumArea}) => {\r\n    return (<>{isAreaCalculated && <div className={style.areaCalcContainer}>\r\n       <div className={style.areaCalcContainer__areaItem}> {`Площадь дна: ${bottomArea} м²`} </div>\r\n       <div className={style.areaCalcContainer__areaItem}> {`Площадь боковой поверхности: ${slopeArea} м²`} </div>\r\n       <div className={style.areaCalcContainer__areaItem}> {`Площадь напуска на анкеровку: ${overlapArea} м²`} </div>\r\n       <div className={style.areaCalcContainer__sumArea}> {`Общая площаь работ: ${sumArea} м²`} </div>\r\n    </div>}\r\n        </>)\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Header} from './Components/Header/Header';\r\nimport {MaterialCalculation} from './Components/MaterialCalculation/MaterialCalculation';\r\nimport {InitialDataContainer} from './Components/InitialData/InitialDataContainer';\r\nimport {AreaCalculationContainer} from './Components/AreaCalculation/AreaCalculationContainer';\r\n\r\nconst App = () => {\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <InitialDataContainer/>\r\n            <AreaCalculationContainer/>\r\n            <MaterialCalculation/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore} from 'redux';\r\nimport {appReducer} from './AppReducer';\r\n\r\nlet reducers = combineReducers({\r\n    app: appReducer,\r\n})\r\n\r\nconst store = createStore(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"commonDataForm\":\"InitialData_commonDataForm__3fsyN\",\"commonDataForm__fullForm\":\"InitialData_commonDataForm__fullForm__1FKAx\",\"commonDataForm__imageDataForm\":\"InitialData_commonDataForm__imageDataForm__3lhCo\",\"commonDataForm__initialDataForm\":\"InitialData_commonDataForm__initialDataForm__3RiE7\",\"commonDataForm__submitButton\":\"InitialData_commonDataForm__submitButton__2ZJD9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"areaCalcContainer\":\"AreaCalculation_areaCalcContainer__OYLME\"};"],"sourceRoot":""}